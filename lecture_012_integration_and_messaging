Lecture 12 - AWS Integration and Messaging:

sync vs async (event-based) communication

SQS - queue model
SNS - pub/sub
Kinesis - real-time streaming model

SQS - Simple Queue Service
	over 10 year old
	fully managed
	built-in scaling (horizontal scaling)
	default retention of message: 4 days, max: 14 days
	no limit on messages
	low latency (< 10 ms)
	can have duplicate messages
	can have out of order messages
	limit 256 KB per message, apart from metadata
	delay queue - default 0 sec, max 15 min
		can be queue config
		can be message config
	produce message:
		- body (max 256 KB)
		- optional metadata
		- optional delay delivery config
	produce message returns:
		- message id
		- md5 of message body
		- md5 of message attributes
	consume message:
		- poll max 10 message at once
		- process message with visibility timeout
		- delete message after process with id and receipt handle
	visibility timeout:
		- polled message become invisible to other consumers for this period
		- default 30 sec, max 12 hours
		- ChangeMessageVisibility API
		- DeleteMessage API
	dead letter queue:
		- threashold how many times can a message fail to be processsed
		- redrive policy
		- receive count show how many times was it polled
	long polling
		- request message and wait until 1 arrives
		- wait time: 1-20 sec
		- preferred vs short polling
		- WaitTimeSeconds API
	CLI practice:
		- send-message
		- receive message
		- delete-message
	FIFO queue
		- not available in every region
		- name must end in .fifo ?
		- lower throughput
		- keeps order, and no duplication
		- no message delay
		- deduplication
			- could be based on either:
				- MessageDeduplicationId in message
				- SHA-256 of message body - MessageDeduplicationId is generated
		- sequencing
			- specify strict ordering between messages with same group id
			- MessageGroupId
	Extended client
		- accept messages larger than 256 KB
		- java lib
		- uses S3 bucket
			- put message to S3
			- send smaller message with pointer to SQS
			- consumer gets large message from S3 through pointer
	Security
		- https - encryption-in-flight
		- SSE - server-side-encryption using KMS
			- only encrypt message body, not metadata
		- SQS queue access policy
			- IP, time-based access
	API
		CreateQueue, DeleteQueue
		PurgeQueue
		SendMessage, ReceiveMessage, DeleteMessage
		ChangeMessageVisibility
		Batch-message-commands

SNS - Simple Notification Service
	1 producer, multiple receivers/subscribers
	topic based subscribtion
	100k topic limit
	10 million subscriber per topic
	need to process message on publish by the consumer
	subscriber:
		sqs, http/https, lambda, email, sms, ..
	integrates with lot of aws service
	2 types of publish:
		topic (main use)
		direct (mobile apps sdk)
	SNS + SQS: Fan Out
		publish to 1 topic, and multiple SQS receives the message through SNS
		fully decoupled
		no data loss
		delay process

Kinesis
	managed alternative to Apache Kafka (big data streaming tool)
	real-time big data, real-time computation
	Kinesis Streams: low latency srteaming ingest at scale
	Kinesis Analytics: perform real-time analysis on streams using SQL
	Kinesis FireHose: load streams into S3, Redshift, ElasticSearch

Kinesis Streams
	Shards:
		1 queue, "like lane on highway"
		1 MB/s or 1k messages/s per shard
		2 MB/s per shard
		ordered messages in shards
		reshared - adding shard(s)
		merge - removing shard(s)
	Partitions:
		PutRecords used to send message to Kinesis
		needs partition key, hashed to determine shard key
		partition key needs to be highly distributed (to prevent "hot partition")
	data retention default 1 day, max 7 days
	ability to reprocess, replay data
	once data inserted, it is immutable
	billing is per shareds
	batching with PutRecords
	ProvisionedThroughputExceeded exception
	consumer - cli, sdk, kinesis client library

Kinesis KCL (Kinesis Client Library)
	distibuted apps sharing read workload
	1 shard read by only 1 KCL instance
	progress is checkpointed into DynamoDB (needs IAM role)

Kinesis Security
	IAM policies
	encrpytion in flight with https
	encryption at rest with KMS
	ecrypt/decrypt data on client side (custom impl)
	VPC endpoints

Kinesis Data Analytics
	real-time analytics using SQL
	auto-scaling
	managed by aws
	pay for actual consumption

Kinesis Firehose
	fully managed
	near real-time (60s latency)
	load data into Redshift/AWS S3/ElasticSearch/Splunk
	support many data format
